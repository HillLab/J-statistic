cnvData <- cnvData[grep("X|Y|M",cnvData$'CNV.Chromosome', invert=TRUE),]
# Skip output of processed file if sample has no CNVs
if (nrow(cnvData)==0){
write.csv(NA, file.path(output_directory, paste0(sampleName,"-NULL", ".csv")), row.names=FALSE, na='' )
next
}
# Sort SNP dataframe by chromosome number and mutation position
snpData <- snpData[order(as.numeric(as.character(snpData$'SNP.Chromosome')),snpData$'Position'),]
# Sort CNV dataframe by chromosome number and segment start position
cnvData <- cnvData[order(cnvData$'CNV.Chromosome',cnvData$'Start'),]
# Merge SNP and CNV dataframe into a single dataframe
snpData$nullID <- seq.int(nrow(snpData))
cnvData$nullID <- seq.int(nrow(cnvData))
outputtable<-merge(snpData,cnvData, by ="nullID", all.x=T, check.names=F)
outputtable$'nullID'<-NULL
# Output merged dataframe as CSV file
write.csv(outputtable, file.path(output_directory, paste0(sampleName,".csv")), row.names=FALSE, na='' )
# Update Stage 2 progress bar
stage_2_pb_counter = stage_2_pb_counter + 1
setTxtProgressBar(stage_2_pb, stage_2_pb_counter)
}
i
snpData_input <- calls[,c(1,2,i)]
##############################################
#Set up SNP input data for WGS/WES experiment#
##############################################
if (!is.null(wgs)){
# Proportionally (based on segment length) sample random base locations
wgs$Length <- wgs$End - wgs$Start
wgs_total_length <- sum(wgs$Length)
wgs_index_sample = sample(as.numeric(rownames(wgs)), size = wgs_nsample, replace = TRUE,  prob = (wgs$Length / wgs_total_length))
# Generate dataframe of wgs_nsample length with randomly sampled chromosome and base locations
counter <- 1
null_pos <- list()
null_chr <- list()
for (y in wgs_index_sample){
null_pos[[counter]] <- floor(runif(1, wgs[y,"Start"], wgs[y,"End"]-1))
null_chr[[counter]] <- wgs[y,"Chromosome"]
if (counter == wgs_nsample)  {
break
}
counter <- counter + 1
}
# Outer join of input SNP data (observed mutations) and randomly sampled locations (null distribution of mutations)
snpData <- cbind(data.frame(unlist(null_chr)), data.frame(unlist(null_pos)))
colnames(snpData) <- c("SNP.Chromosome", "Position")
snpData_input = merge(snpData, snpData_input, by=c("SNP.Chromosome", "Position"), all = TRUE)
snpData_input[, 3][is.na(snpData_input[, 3])] <- 0
}
snpData
snpData_input
snpData <- cbind(data.frame(unlist(null_chr)), data.frame(unlist(null_pos)))
snpData
colnames(snpData) <- c("SNP.Chromosome", "Position")
snpData_input <- calls[,c(1,2,i)]
snpData_input
calls
3:ncol(calls)
calls = read.csv("./example/input/example_SNP.csv",check.names=FALSE)
cnvsData = read.csv("./example/input/example_CNV.csv",check.names=FALSE)
output_directory = "./example/example_use_case_1"
numRuns = 10
heterozygousCallCutoff = 10
seed = 0
max_distance = 10000000
interval_distance = 1000
cluster_max_distance = 5000
cluster_interval_distance = 0.05
alpha = 0.05
wgs =  read.csv("./example/input/example_genome.csv",check.names=FALSE)
wgs_nsample = 500000
output_directory = "./example/example_use_case_4"
cat("Stage 2: Pre-process input data for J-statistic script.\n")
# Create output folder
dir.create(output_directory, showWarnings = FALSE)
# Initialize Stage 2 Progress Bar
stage_2_pb <- txtProgressBar(min = 0, max = length(4:ncol(calls)), style = 3)
stage_2_pb_counter = 0
# Output one processed file (contains both SNPs and CNVs) for each sample
for (i in 3:ncol(calls)){
snpData_input <- calls[,c(1,2,i)]
##############################################
#Set up SNP input data for WGS/WES experiment#
##############################################
if (!is.null(wgs)){
# Proportionally (based on segment length) sample random base locations
wgs$Length <- wgs$End - wgs$Start
wgs_total_length <- sum(wgs$Length)
wgs_index_sample = sample(as.numeric(rownames(wgs)), size = wgs_nsample, replace = TRUE,  prob = (wgs$Length / wgs_total_length))
# Generate dataframe of wgs_nsample length with randomly sampled chromosome and base locations
counter <- 1
null_pos <- list()
null_chr <- list()
for (y in wgs_index_sample){
null_pos[[counter]] <- floor(runif(1, wgs[y,"Start"], wgs[y,"End"]-1))
null_chr[[counter]] <- wgs[y,"Chromosome"]
if (counter == wgs_nsample)  {
break
}
counter <- counter + 1
}
# Outer join of input SNP data (observed mutations) and randomly sampled locations (null distribution of mutations)
snpData <- cbind(data.frame(unlist(null_chr)), data.frame(unlist(null_pos)))
colnames(snpData) <- c("SNP.Chromosome", "Position")
snpData_input = merge(snpData, snpData_input, by=c("SNP.Chromosome", "Position"), all = TRUE)
snpData_input[, 3][is.na(snpData_input[, 3])] <- 0
}
cat("Stage 2: Pre-process input data for J-statistic script.\n")
# Create output folder
dir.create(output_directory, showWarnings = FALSE)
# Initialize Stage 2 Progress Bar
stage_2_pb <- txtProgressBar(min = 0, max = length(4:ncol(calls)), style = 3)
stage_2_pb_counter = 0
# Output one processed file (contains both SNPs and CNVs) for each sample
for (i in 3:ncol(calls)){
snpData_input <- calls[,c(1,2,i)]
##############################################
#Set up SNP input data for WGS/WES experiment#
##############################################
if (!is.null(wgs)){
# Proportionally (based on segment length) sample random base locations
wgs$Length <- wgs$End - wgs$Start
wgs_total_length <- sum(wgs$Length)
wgs_index_sample = sample(as.numeric(rownames(wgs)), size = wgs_nsample, replace = TRUE,  prob = (wgs$Length / wgs_total_length))
# Generate dataframe of wgs_nsample length with randomly sampled chromosome and base locations
counter <- 1
null_pos <- list()
null_chr <- list()
for (y in wgs_index_sample){
null_pos[[counter]] <- floor(runif(1, wgs[y,"Start"], wgs[y,"End"]-1))
null_chr[[counter]] <- wgs[y,"Chromosome"]
if (counter == wgs_nsample)  {
break
}
counter <- counter + 1
}
# Outer join of input SNP data (observed mutations) and randomly sampled locations (null distribution of mutations)
snpData <- cbind(data.frame(unlist(null_chr)), data.frame(unlist(null_pos)))
colnames(snpData) <- c("SNP.Chromosome", "Position")
snpData_input = merge(snpData, snpData_input, by=c("SNP.Chromosome", "Position"), all = TRUE)
snpData_input[, 3][is.na(snpData_input[, 3])] <- 0
}
#######################################################
#Set up SNP input data for microarray probe experiment#
#######################################################
# Remove all SNPs found in X, Y, and M chromosomes from downstream statistical analysis
snpData <- snpData_input[grep("X|Y|M",snpData_input$'SNP.Chromosome', invert=TRUE),]
sampleName <- colnames(snpData)[3]
# Remove all CNVs found in X, Y, and M chromosomes from downstream statistical analysis
cnvData <- cnvsData[grep(sampleName,cnvsData$'Sample'),]
cnvData <- cnvData[grep("X|Y|M",cnvData$'CNV.Chromosome', invert=TRUE),]
# Skip output of processed file if sample has no CNVs
if (nrow(cnvData)==0){
write.csv(NA, file.path(output_directory, paste0(sampleName,"-NULL", ".csv")), row.names=FALSE, na='' )
next
}
# Sort SNP dataframe by chromosome number and mutation position
snpData <- snpData[order(as.numeric(as.character(snpData$'SNP.Chromosome')),snpData$'Position'),]
# Sort CNV dataframe by chromosome number and segment start position
cnvData <- cnvData[order(cnvData$'CNV.Chromosome',cnvData$'Start'),]
# Merge SNP and CNV dataframe into a single dataframe
snpData$nullID <- seq.int(nrow(snpData))
cnvData$nullID <- seq.int(nrow(cnvData))
outputtable<-merge(snpData,cnvData, by ="nullID", all.x=T, check.names=F)
outputtable$'nullID'<-NULL
# Output merged dataframe as CSV file
write.csv(outputtable, file.path(output_directory, paste0(sampleName,".csv")), row.names=FALSE, na='' )
# Update Stage 2 progress bar
stage_2_pb_counter = stage_2_pb_counter + 1
setTxtProgressBar(stage_2_pb, stage_2_pb_counter)
}
close(stage_2_pb)
cat("Stage 3: J-statistic calculation and plots. \n")
# Initialize dataframe for the Excel document output with the generated statistics for all samples
excel_data<-data.frame(matrix(ncol=6,nrow=0, dimnames=list(NULL, c('Chromosome', 'p.KS', 'p.J', 'Num_CNV', 'SNP_CNV_Association', 'Sample'))))
# Initialize Stage 3 Progress Bar
stage_3_pb <- txtProgressBar(min = 0, max = length(list.files(path = output_directory, pattern= paste0('^(SNP_).*(.csv)$'), full.names=TRUE)), style = 3)
stage_3_pb_counter = 0
list.files(path=output_directory, pattern=".csv", all.files=TRUE, full.names=TRUE)
file = "./example/example_use_case_4/SNP_mDIV_A1_SNP09_319_111109.csv"
print(file)
# Read in merged SNP and CNV dataframe
cancer.data <- read.csv(paste0(file), header=T)
# Initialize dataframe for the Excel document output with the generated statistics for one sample
excel_table<-data.frame(matrix(ncol=6,nrow=length(as.numeric(na.omit(unique(cancer.data[["SNP.Chromosome"]]))))))
colnames(excel_table)<- c('Chromosome', 'p.KS', 'p.J', 'Num_CNV', 'SNP_CNV_Association', 'Sample')
# Get sample name
filename<-gsub('.csv','',file)
filenamesplit <- strsplit(filename, "/")[[1]]
fileNoSuffix <- filenamesplit[length(filenamesplit)]
# Create empty output directory
dir.create(paste0(output_directory, '/', fileNoSuffix), showWarnings = F)
as.numeric(na.omit(unique(cancer.data[["SNP.Chromosome"]])))
i = 1
# Subset merged dataframe for one chromosome
cancer.data.19 <- subset(cancer.data, SNP.Chromosome == i)
# Get the set of all SNPs (marked with either 0 or 1)
probe.set.19 <- cancer.data.19$Position
# Get the subset of SNPs of interest (marked with only 1)
SNP.example <- sort(as.numeric(na.omit(probe.set.19[which(cancer.data.19[,fileNoSuffix] == 1)])))
# If chromosome has no CNVs, then just make empty folder and note on output summary statistic table
if (!(i %in% (unique(cancer.data$CNV.Chromosome)))){
dir.create(paste0(output_directory, '/', fileNoSuffix,'/',fileNoSuffix,'_Chr_', i,'-NoCNVs'), showWarnings = FALSE)
excel_table[i,]<-c(i, "N", "N", 0, "No_CNVs",  fileNoSuffix)
next
}
# Number of CNVs for each chromosome
numberCNVs<- sum((cancer.data$CNV.Chromosome[!is.na(cancer.data$CNV.Chromosome)])==i)
# If less than threshold cutoff of SNPs, skip the statistical analyses and plotting for the chromosome
if (length(SNP.example)<= heterozygousCallCutoff){
dir.create(paste0(output_directory, '/', fileNoSuffix,'/',fileNoSuffix,'_Chr_', i,'-LessThanHetCutoff'), showWarnings = FALSE)
excel_table[i,]<-c(i, "<", "<", numberCNVs, "< Min_SNP_Cutoff", fileNoSuffix)
next
}
dir.create(paste0(output_directory, '/', fileNoSuffix,'/',fileNoSuffix,'_Chr_', i), showWarnings = FALSE)
# Save Rainfall Plot as PDF for each chromosome
pdf(file=paste0(output_directory,'/',fileNoSuffix,'/',fileNoSuffix,'_Chr_', i,'/',fileNoSuffix,'_Chr_', i,'_Rainfall_Plot.pdf'))
plot(log10(diff(SNP.example)) ~ SNP.example[-1], pch = 16, ylab="", xlab="")
# Rainfall Plot Label on X-axis
mtext(1, text = bquote("Chromosome Position (bp)"), cex = 1.2, line = 3)
# Rainfall Plot Label on Y-axis
mtext(2, text = "Distance between SNPs", cex = 1.2, line = 2.5)
# Rainfall Plot Title
title(main = paste0(fileNoSuffix,"_Chr_", i))
dev.off()
# Set up sequence of grid points for SNP cluster test
grid.points <- (1: (cluster_max_distance/cluster_interval_distance)) * cluster_interval_distance
grid.points
calls = read.csv("./example/input/example_SNP.csv",check.names=FALSE)
cnvsData = read.csv("./example/input/example_CNV.csv",check.names=FALSE)
output_directory = "./example/example_use_case_4"
numRuns = 10
heterozygousCallCutoff = 10
seed = 0
max_distance = 10000000
interval_distance = 5000
cluster_max_distance = 5100000
cluster_interval_distance = 5000
alpha = 0.05
wgs =  read.csv("./example/input/example_genome.csv",check.names=FALSE)
wgs_nsample = 500000
cat("Stage 2: Pre-process input data for J-statistic script.\n")
# Create output folder
dir.create(output_directory, showWarnings = FALSE)
# Initialize Stage 2 Progress Bar
stage_2_pb <- txtProgressBar(min = 0, max = length(4:ncol(calls)), style = 3)
stage_2_pb_counter = 0
# Output one processed file (contains both SNPs and CNVs) for each sample
for (i in 3:ncol(calls)){
snpData_input <- calls[,c(1,2,i)]
##############################################
#Set up SNP input data for WGS/WES experiment#
##############################################
if (!is.null(wgs)){
# Proportionally (based on segment length) sample random base locations
wgs$Length <- wgs$End - wgs$Start
wgs_total_length <- sum(wgs$Length)
wgs_index_sample = sample(as.numeric(rownames(wgs)), size = wgs_nsample, replace = TRUE,  prob = (wgs$Length / wgs_total_length))
# Generate dataframe of wgs_nsample length with randomly sampled chromosome and base locations
counter <- 1
null_pos <- list()
null_chr <- list()
for (y in wgs_index_sample){
null_pos[[counter]] <- floor(runif(1, wgs[y,"Start"], wgs[y,"End"]-1))
null_chr[[counter]] <- wgs[y,"Chromosome"]
if (counter == wgs_nsample)  {
break
}
counter <- counter + 1
}
# Outer join of input SNP data (observed mutations) and randomly sampled locations (null distribution of mutations)
snpData <- cbind(data.frame(unlist(null_chr)), data.frame(unlist(null_pos)))
colnames(snpData) <- c("SNP.Chromosome", "Position")
snpData_input = merge(snpData, snpData_input, by=c("SNP.Chromosome", "Position"), all = TRUE)
snpData_input[, 3][is.na(snpData_input[, 3])] <- 0
}
#######################################################
#Set up SNP input data for microarray probe experiment#
#######################################################
# Remove all SNPs found in X, Y, and M chromosomes from downstream statistical analysis
snpData <- snpData_input[grep("X|Y|M",snpData_input$'SNP.Chromosome', invert=TRUE),]
sampleName <- colnames(snpData)[3]
# Remove all CNVs found in X, Y, and M chromosomes from downstream statistical analysis
cnvData <- cnvsData[grep(sampleName,cnvsData$'Sample'),]
cnvData <- cnvData[grep("X|Y|M",cnvData$'CNV.Chromosome', invert=TRUE),]
# Skip output of processed file if sample has no CNVs
if (nrow(cnvData)==0){
write.csv(NA, file.path(output_directory, paste0(sampleName,"-NULL", ".csv")), row.names=FALSE, na='' )
next
}
# Sort SNP dataframe by chromosome number and mutation position
snpData <- snpData[order(as.numeric(as.character(snpData$'SNP.Chromosome')),snpData$'Position'),]
# Sort CNV dataframe by chromosome number and segment start position
cnvData <- cnvData[order(cnvData$'CNV.Chromosome',cnvData$'Start'),]
# Merge SNP and CNV dataframe into a single dataframe
snpData$nullID <- seq.int(nrow(snpData))
cnvData$nullID <- seq.int(nrow(cnvData))
outputtable<-merge(snpData,cnvData, by ="nullID", all.x=T, check.names=F)
outputtable$'nullID'<-NULL
# Output merged dataframe as CSV file
write.csv(outputtable, file.path(output_directory, paste0(sampleName,".csv")), row.names=FALSE, na='' )
# Update Stage 2 progress bar
stage_2_pb_counter = stage_2_pb_counter + 1
setTxtProgressBar(stage_2_pb, stage_2_pb_counter)
}
close(stage_2_pb)
cat("Stage 3: J-statistic calculation and plots. \n")
# Initialize dataframe for the Excel document output with the generated statistics for all samples
excel_data<-data.frame(matrix(ncol=6,nrow=0, dimnames=list(NULL, c('Chromosome', 'p.KS', 'p.J', 'Num_CNV', 'SNP_CNV_Association', 'Sample'))))
# Initialize Stage 3 Progress Bar
stage_3_pb <- txtProgressBar(min = 0, max = length(list.files(path = output_directory, pattern= paste0('^(SNP_).*(.csv)$'), full.names=TRUE)), style = 3)
stage_3_pb_counter = 0
print(file)
# Read in merged SNP and CNV dataframe
cancer.data <- read.csv(paste0(file), header=T)
# Initialize dataframe for the Excel document output with the generated statistics for one sample
excel_table<-data.frame(matrix(ncol=6,nrow=length(as.numeric(na.omit(unique(cancer.data[["SNP.Chromosome"]]))))))
colnames(excel_table)<- c('Chromosome', 'p.KS', 'p.J', 'Num_CNV', 'SNP_CNV_Association', 'Sample')
# Get sample name
filename<-gsub('.csv','',file)
filenamesplit <- strsplit(filename, "/")[[1]]
fileNoSuffix <- filenamesplit[length(filenamesplit)]
# Create empty output directory
dir.create(paste0(output_directory, '/', fileNoSuffix), showWarnings = F)
i
i = 1
#########################
#Stage 3.1 Rainfall Plot#
#########################
# Subset merged dataframe for one chromosome
cancer.data.19 <- subset(cancer.data, SNP.Chromosome == i)
# Get the set of all SNPs (marked with either 0 or 1)
probe.set.19 <- cancer.data.19$Position
# Get the subset of SNPs of interest (marked with only 1)
SNP.example <- sort(as.numeric(na.omit(probe.set.19[which(cancer.data.19[,fileNoSuffix] == 1)])))
# If chromosome has no CNVs, then just make empty folder and note on output summary statistic table
if (!(i %in% (unique(cancer.data$CNV.Chromosome)))){
dir.create(paste0(output_directory, '/', fileNoSuffix,'/',fileNoSuffix,'_Chr_', i,'-NoCNVs'), showWarnings = FALSE)
excel_table[i,]<-c(i, "N", "N", 0, "No_CNVs",  fileNoSuffix)
next
}
# Number of CNVs for each chromosome
numberCNVs<- sum((cancer.data$CNV.Chromosome[!is.na(cancer.data$CNV.Chromosome)])==i)
# If less than threshold cutoff of SNPs, skip the statistical analyses and plotting for the chromosome
if (length(SNP.example)<= heterozygousCallCutoff){
dir.create(paste0(output_directory, '/', fileNoSuffix,'/',fileNoSuffix,'_Chr_', i,'-LessThanHetCutoff'), showWarnings = FALSE)
excel_table[i,]<-c(i, "<", "<", numberCNVs, "< Min_SNP_Cutoff", fileNoSuffix)
next
}
dir.create(paste0(output_directory, '/', fileNoSuffix,'/',fileNoSuffix,'_Chr_', i), showWarnings = FALSE)
# Save Rainfall Plot as PDF for each chromosome
pdf(file=paste0(output_directory,'/',fileNoSuffix,'/',fileNoSuffix,'_Chr_', i,'/',fileNoSuffix,'_Chr_', i,'_Rainfall_Plot.pdf'))
plot(log10(diff(SNP.example)) ~ SNP.example[-1], pch = 16, ylab="", xlab="")
# Rainfall Plot Label on X-axis
mtext(1, text = bquote("Chromosome Position (bp)"), cex = 1.2, line = 3)
# Rainfall Plot Label on Y-axis
mtext(2, text = "Distance between SNPs", cex = 1.2, line = 2.5)
# Rainfall Plot Title
title(main = paste0(fileNoSuffix,"_Chr_", i))
dev.off()
output_directory
#########################
#Stage 3.1 Rainfall Plot#
#########################
# Subset merged dataframe for one chromosome
cancer.data.19 <- subset(cancer.data, SNP.Chromosome == i)
# Get the set of all SNPs (marked with either 0 or 1)
probe.set.19 <- cancer.data.19$Position
# Get the subset of SNPs of interest (marked with only 1)
SNP.example <- sort(as.numeric(na.omit(probe.set.19[which(cancer.data.19[,fileNoSuffix] == 1)])))
# If chromosome has no CNVs, then just make empty folder and note on output summary statistic table
if (!(i %in% (unique(cancer.data$CNV.Chromosome)))){
dir.create(paste0(output_directory, '/', fileNoSuffix,'/',fileNoSuffix,'_Chr_', i,'-NoCNVs'), showWarnings = FALSE)
excel_table[i,]<-c(i, "N", "N", 0, "No_CNVs",  fileNoSuffix)
next
}
# Number of CNVs for each chromosome
numberCNVs<- sum((cancer.data$CNV.Chromosome[!is.na(cancer.data$CNV.Chromosome)])==i)
# If less than threshold cutoff of SNPs, skip the statistical analyses and plotting for the chromosome
if (length(SNP.example)<= heterozygousCallCutoff){
dir.create(paste0(output_directory, '/', fileNoSuffix,'/',fileNoSuffix,'_Chr_', i,'-LessThanHetCutoff'), showWarnings = FALSE)
excel_table[i,]<-c(i, "<", "<", numberCNVs, "< Min_SNP_Cutoff", fileNoSuffix)
next
}
dir.create(paste0(output_directory, '/', fileNoSuffix,'/',fileNoSuffix,'_Chr_', i), showWarnings = FALSE)
# Save Rainfall Plot as PDF for each chromosome
pdf(file=paste0(output_directory,'/',fileNoSuffix,'/',fileNoSuffix,'_Chr_', i,'/',fileNoSuffix,'_Chr_', i,'_Rainfall_Plot.pdf'))
plot(log10(diff(SNP.example)) ~ SNP.example[-1], pch = 16, ylab="", xlab="")
# Rainfall Plot Label on X-axis
mtext(1, text = bquote("Chromosome Position (bp)"), cex = 1.2, line = 3)
# Rainfall Plot Label on Y-axis
mtext(2, text = "Distance between SNPs", cex = 1.2, line = 2.5)
# Rainfall Plot Title
title(main = paste0(fileNoSuffix,"_Chr_", i))
dev.off()
cancer.data$CNV.Chromosome
# Subset merged dataframe for one chromosome
cancer.data.19 <- subset(cancer.data, SNP.Chromosome == i)
# Get the set of all SNPs (marked with either 0 or 1)
probe.set.19 <- cancer.data.19$Position
# Get the subset of SNPs of interest (marked with only 1)
SNP.example <- sort(as.numeric(na.omit(probe.set.19[which(cancer.data.19[,fileNoSuffix] == 1)])))
# If chromosome has no CNVs, then just make empty folder and note on output summary statistic table
if (!(i %in% (unique(cancer.data$CNV.Chromosome)))){
dir.create(paste0(output_directory, '/', fileNoSuffix,'/',fileNoSuffix,'_Chr_', i,'-NoCNVs'), showWarnings = FALSE)
excel_table[i,]<-c(i, "N", "N", 0, "No_CNVs",  fileNoSuffix)
next
}
# Number of CNVs for each chromosome
numberCNVs<- sum((cancer.data$CNV.Chromosome[!is.na(cancer.data$CNV.Chromosome)])==i)
# If less than threshold cutoff of SNPs, skip the statistical analyses and plotting for the chromosome
if (length(SNP.example)<= heterozygousCallCutoff){
dir.create(paste0(output_directory, '/', fileNoSuffix,'/',fileNoSuffix,'_Chr_', i,'-LessThanHetCutoff'), showWarnings = FALSE)
excel_table[i,]<-c(i, "<", "<", numberCNVs, "< Min_SNP_Cutoff", fileNoSuffix)
next
}
length(SNP.example)
SNP.example
plot(log10(diff(SNP.example)) ~ SNP.example[-1], pch = 16, ylab="", xlab="")
# Rainfall Plot Label on X-axis
mtext(1, text = bquote("Chromosome Position (bp)"), cex = 1.2, line = 3)
# Rainfall Plot Label on Y-axis
mtext(2, text = "Distance between SNPs", cex = 1.2, line = 2.5)
# Rainfall Plot Title
title(main = paste0(fileNoSuffix,"_Chr_", i))
# Save Rainfall Plot as PDF for each chromosome
pdf(file=paste0(output_directory,'/',fileNoSuffix,'/',fileNoSuffix,'_Chr_', i,'/',fileNoSuffix,'_Chr_', i,'_Rainfall_Plot.pdf'))
plot(log10(diff(SNP.example)) ~ SNP.example[-1], pch = 16, ylab="", xlab="")
# Rainfall Plot Label on X-axis
mtext(1, text = bquote("Chromosome Position (bp)"), cex = 1.2, line = 3)
# Rainfall Plot Label on Y-axis
mtext(2, text = "Distance between SNPs", cex = 1.2, line = 2.5)
# Rainfall Plot Title
title(main = paste0(fileNoSuffix,"_Chr_", i))
dev.off()
dir.create(paste0(output_directory, '/', fileNoSuffix,'/',fileNoSuffix,'_Chr_', i), showWarnings = FALSE)
# Save Rainfall Plot as PDF for each chromosome
pdf(file=paste0(output_directory,'/',fileNoSuffix,'/',fileNoSuffix,'_Chr_', i,'/',fileNoSuffix,'_Chr_', i,'_Rainfall_Plot.pdf'))
plot(log10(diff(SNP.example)) ~ SNP.example[-1], pch = 16, ylab="", xlab="")
# Rainfall Plot Label on X-axis
mtext(1, text = bquote("Chromosome Position (bp)"), cex = 1.2, line = 3)
# Rainfall Plot Label on Y-axis
mtext(2, text = "Distance between SNPs", cex = 1.2, line = 2.5)
# Rainfall Plot Title
title(main = paste0(fileNoSuffix,"_Chr_", i))
fileNoSuffix
output_directory
getwd()
setwd('/Users/davidchen/Documents/GitHub/J')
dir.create(paste0(output_directory, '/', fileNoSuffix,'/',fileNoSuffix,'_Chr_', i), showWarnings = FALSE)
# Save Rainfall Plot as PDF for each chromosome
pdf(file=paste0(output_directory,'/',fileNoSuffix,'/',fileNoSuffix,'_Chr_', i,'/',fileNoSuffix,'_Chr_', i,'_Rainfall_Plot.pdf'))
plot(log10(diff(SNP.example)) ~ SNP.example[-1], pch = 16, ylab="", xlab="")
# Rainfall Plot Label on X-axis
mtext(1, text = bquote("Chromosome Position (bp)"), cex = 1.2, line = 3)
# Rainfall Plot Label on Y-axis
mtext(2, text = "Distance between SNPs", cex = 1.2, line = 2.5)
# Rainfall Plot Title
title(main = paste0(fileNoSuffix,"_Chr_", i))
dev.off()
# Set up sequence of grid points for SNP cluster test
grid.points <- (1: (cluster_max_distance/cluster_interval_distance)) * cluster_interval_distance
# Directory for the output plots and statistics file to be saved
save.directory.SNP <- paste0(output_directory,'/',fileNoSuffix,'/',fileNoSuffix,'_Chr_', i, '/')
# SNP Cluster RData file name
file.name.SNP <- paste0(fileNoSuffix, "_Chr_",i,"_SNP_Cluster")
# Set seed for reproducibility
set.seed(seed)
grid.points
!is.null(wgs)
snpData_input
snpData_input
3:ncol(calls)
i = 3
snpData_input <- calls[,c(1,2,i)]
wgs$Length <- wgs$End - wgs$Start
wgs_total_length <- sum(wgs$Length)
wgs_index_sample = sample(as.numeric(rownames(wgs)), size = wgs_nsample, replace = TRUE,  prob = (wgs$Length / wgs_total_length))
# Generate dataframe of wgs_nsample length with randomly sampled chromosome and base locations
counter <- 1
null_pos <- list()
null_chr <- list()
for (y in wgs_index_sample){
null_pos[[counter]] <- floor(runif(1, wgs[y,"Start"], wgs[y,"End"]-1))
null_chr[[counter]] <- wgs[y,"Chromosome"]
if (counter == wgs_nsample)  {
break
}
counter <- counter + 1
}
snpData <- cbind(data.frame(unlist(null_chr)), data.frame(unlist(null_pos)))
colnames(snpData) <- c("SNP.Chromosome", "Position")
snpData
snpData_input
merge(snpData, snpData_input, by=c("SNP.Chromosome", "Position"), all = TRUE)
test = merge(snpData, snpData_input, by=c("SNP.Chromosome", "Position"), all = TRUE)
View(test)
View(snpData_input)
snpData
snpData_input
colnames(snpData_input)
colnames(snpData_input)[2:]
c(colnames(snpData_input))
c(colnames(snpData_input))[2:]
colnames(snpData_input)
colnames(snpData_input)[,2]
colnames(snpData_input)[2]
colnames(snpData_input)[2:,]
colnames(snpData_input)[2:]
as.list(colnames(snpData_input))
as.list(colnames(snpData_input))[2:]
as.vector(colnames(snpData_input))[2:]
